@page "/weather"

@using GoogleMapsComponents
@using GoogleMapsComponents.Maps
@using System.Threading.Tasks;
@using System;
@using System.Globalization;
@using System.Text;
@using System.Threading;
@using GoogleMap1.Components
@using Newtonsoft.Json.Linq;
@using System.IO;

<h1>Google Map</h1>

<GoogleMap @ref="@map1" Id="map1" Options="@mapOptions" Height="900px" OnAfterInit="@OnAfterInitAsync"></GoogleMap>

<p>
    @myEvent
</p>



@code {

    private GoogleMap map1;
    private MapOptions mapOptions;

    private string myLatLong = string.Empty;
    private string myEvent = string.Empty;


    protected override void OnInitialized()
    {
        mapOptions = new MapOptions()
        {
            Zoom = 13,
            Center = new LatLngLiteral()
            {
                Lat = 52.515778,
                Lng = 14.112908
            },
            MapTypeId = MapTypeId.Roadmap
        };
    }

    private async Task OnAfterInitAsync()
    {
        await map1.InteropObject.AddListener<MouseEvent>("click", async (e) => await OnClick(e));
        await map1.InteropObject.AddListener<MouseEvent>("dblclick", async (e) => await OnDoubleClick(e));

        JsonHandler.GetStationsData();
        await LoadMarkers();
    }

    private async Task LoadMarkers()
    {
        var Position = await map1.InteropObject.GetCenter();
        JObject stationsData = JObject.Parse(File.ReadAllText("Data/wstations.json"));

        JArray stationIDs = new JArray();
        if (stationsData.ContainsKey("id"))
            stationIDs = stationsData["id"] as JArray;
        JArray stationNames = new JArray();
        if (stationsData.ContainsKey("name"))
            stationNames = stationsData["name"] as JArray;
        JArray stationLats = new JArray();
        if (stationsData.ContainsKey("lat"))
            stationLats = stationsData["lat"] as JArray;
        JArray stationLngs = new JArray();
        if (stationsData.ContainsKey("lng"))
            stationLngs = stationsData["lng"] as JArray;

        LatLngLiteral[] PositionArray = new LatLngLiteral[stationIDs.Count];
        for (int i = 0; i < stationIDs.Count; i++)
        {


            var marker = await Marker.CreateAsync(map1.JsRuntime, new MarkerOptions()
            {
                Position = new LatLngLiteral()
                {
                    Lat = Convert.ToDouble(stationLats[i]),
                    Lng = Convert.ToDouble(stationLngs[i])
                },
                Map = map1.InteropObject,
                //Label = $"Name: {stationNames[i]}",
                Label = $"{stationIDs[i]}",
                Title = $"{stationIDs[i]}"  // save id in title to use later by calling marker.GetTitle()
            });

            var infoWindow = await InfoWindow.CreateAsync(map1.JsRuntime, new InfoWindowOptions()
            {
                Position = new LatLngLiteral()
                {
                    Lat = Convert.ToDouble(stationLats[i]),
                    Lng = Convert.ToDouble(stationLngs[i])
                },
            });

            var infoWindowContent = $"</br > Station Name: {stationNames[i].ToString()} </br>";

            @*double Lat = Convert.ToDouble(stationLats[i]);
            double Lng = Convert.ToDouble(stationLngs[i]);
            Position = new LatLngLiteral(Lng, Lat);

            await marker.AddListener("click", async () =>
            {
                await infoWindow.SetContent(infoWindowContent);
                await infoWindow.SetPosition(Position);
                await infoWindow.Open(map1.InteropObject);
            });*@

        PositionArray[i] = new LatLngLiteral()
        {
            Lat = Convert.ToDouble(stationLats[i]),
            Lng = Convert.ToDouble(stationLngs[i])
        };


        Console.WriteLine(i);

        await marker.AddListener("click", async () =>
        {
            var markerLabel = await marker.GetTitle();
            int markerID = Convert.ToInt32(markerLabel);
            var markerPosition = await marker.GetPosition();

            await infoWindow.SetContent(infoWindowContent);
            //await infoWindow.SetPosition(PositionArray[2]);
            await infoWindow.SetPosition(markerPosition);
            await infoWindow.Open(map1.InteropObject);

            myEvent = "Marker ID:" + markerID;
            StateHasChanged();
        });


    }


}


private async Task OnClick(MouseEvent e)
{
    // Change the localization to covert comma to dot
    System.Threading.Thread.CurrentThread.CurrentCulture = System.Globalization.CultureInfo.GetCultureInfo("en-US");
    myLatLong = e.LatLng.ToString();
    myEvent = "Clicked on:" + myLatLong;



    StateHasChanged();
}

private async Task OnDoubleClick(MouseEvent e)
{
    myLatLong = e.LatLng.ToString();
    myEvent = "Double Clicked on:" + myLatLong;

    StateHasChanged();
}

}